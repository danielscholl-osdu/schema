#  Copyright ï¿½ Microsoft Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#####################
# README: Defines a common set of deployment steps that the deploy stage can call into.
#####################

parameters:
  artifactName: 'drop'
  serviceName: ''
  providerName: ''
  jarFilePattern: '*-SNAPSHOT*.jar'
  integrationTestMavenGoal: 'package'
  mavenPublishJUnitResults: false
  testCoreMavenPomFile: ''
  testCoreMavenGoal: 'install'
  testCoreMavenOptions: ''
  testArtifactLocation: 'drop/deploy'
  elasticEndpoint: ''
  skipTest: ''
  dockerFile: ''
  testPythonFilePath: ''
  testPythonFile: ''
  runPythonTest: ''
  checkoutRepo: self

steps:
  - template: /devops/tasks/detect-jar.yml@TemplateRepo
    parameters:
      stepName: DetectJarScript
      providerName: ${{ parameters.providerName }}
      pomFilePath: $(MAVEN_DEPLOY_POM_FILE_PATH)
      jarFilePattern: ${{ parameters.jarFilePattern }}

  - template: /devops/tasks/acr-publish.yml@TemplateRepo
    parameters:
      environment: ${{ parameters.environment }}
      jarFilePath: $(DetectJarScript.JAR_FILE_PATH)
      providerName: ${{ parameters.providerName }}
      imageRepoName: ${{ parameters.serviceName }}
      artifactName: ${{ parameters.artifactName }}
      dockerFile: ${{ parameters.dockerFile }}

  - template: /devops/tasks/aks-deployment-steps.yml@TemplateRepo
    parameters:
      serviceName: ${{ parameters.serviceName }}
      providerName: ${{ parameters.providerName }}
      environment: ${{ parameters.environment }}
      chartPath: ${{ parameters.chartPath }}
      valuesFile: ${{ parameters.valuesFile }}
      hldRegPath: ${{ parameters.hldRegPath }}
      skipDeploy: ${{ parameters.skipDeploy }}
      checkoutRepo: ${{ parameters.checkoutRepo }}

  - task: ExtractFiles@1
    displayName: 'Extract ${{parameters.serviceName}} integration test suite '
    inputs:
      archiveFilePatterns: '$(System.DefaultWorkingDirectory)/${{ parameters.artifactName }}/${{parameters.serviceName}}-integration-tests.zip'
      destinationFolder: '$(System.DefaultWorkingDirectory)/${{ parameters.testArtifactLocation }}'

  - template: /devops/tasks/elastic-setup.yml@TemplateRepo
    parameters:
      stepName: ExtractElasticHostAndPort
      providerName: ${{ parameters.providerName }}
      elasticEndpoint: ${{ parameters.elasticEndpoint }}

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      addToPath: true
      architecture: 'x64'
  - task: Bash@3
    displayName: 'Deploy Schemas'
    inputs:
      targetType: 'inline'
      script: |
        export AZURE_DEPLOYMENTS_SUBDIR=$(System.DefaultWorkingDirectory)/${{ parameters.artifactName }}/deployments/scripts/azure
        export AZURE_TENANT_ID=$(AZURE_TENANT_ID)
        export AZURE_AD_APP_RESOURCE_ID=$(AZURE_AD_APP_RESOURCE_ID)
        export INTEGRATION_TESTER=$(INTEGRATION_TESTER)
        export AZURE_TESTER_SERVICEPRINCIPAL_SECRET=$(AZURE_TESTER_SERVICEPRINCIPAL_SECRET)
        export DATA_PARTITION=$(DATA_PARTITION_ID)

        pip install -r $AZURE_DEPLOYMENTS_SUBDIR/requirements.txt
        chmod +x $AZURE_DEPLOYMENTS_SUBDIR/bootstrap.sh
        $AZURE_DEPLOYMENTS_SUBDIR/bootstrap.sh

  - task: Maven@3
    displayName: 'Maven build, test, and install ${{parameters.providerName}}-test-core'
    condition: ne('${{ parameters.testCoreMavenPomFile }}', '')
    inputs:
      mavenPomFile: '$(System.DefaultWorkingDirectory)/${{ parameters.testArtifactLocation }}/${{ parameters.testCoreMavenPomFile }}'
      goals: ${{ parameters.testCoreMavenGoal }}
      options: ${{ parameters.testCoreMavenOptions }}
      publishJUnitResults: ${{ parameters.mavenPublishJUnitResults }}

  - template: /devops/tasks/flux-service-wait.yml@TemplateRepo
    parameters:
      serviceName: ${{parameters.serviceName}}
      environment: ${{ parameters.environment }}
      imageRepoName: '${{ parameters.serviceName }}'

  - task: Maven@3
    displayName: 'Maven run integration test'
    condition: and(succeeded(), eq('${{ parameters.skipTest }}', 'false'))
    inputs:
      mavenPomFile: '$(System.DefaultWorkingDirectory)/$(MAVEN_INTEGRATION_TEST_POM_FILE_PATH)'
      goals: ${{ parameters.integrationTestMavenGoal }}
      options: $(MAVEN_INTEGRATION_TEST_OPTIONS)
      publishJUnitResults: ${{ parameters.mavenPublishJUnitResults }}

  - template: /devops/tasks/python-integration-test.yml@TemplateRepo
    parameters:
      stepName: PythonRunIntegrationTests
      testPythonFilePath: ${{ parameters.testPythonFilePath }}
      testPythonFile: ${{ parameters.testPythonFile }}
      runPythonTest: ${{ parameters.runPythonTest }}
