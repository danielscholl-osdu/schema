#Manage common SpringDoc and OpenAPI related properties

#SpringDoc related properties
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.operationsSorter=alpha
springdoc.swagger-ui.doc-expansion=none
springdoc.swagger-ui.path=/swagger
springdoc.swagger-ui.displayOperationId=true
springdoc.api-docs.path=/api-docs

#OpenAPI 3.0 - Schema Service properties
swagger.apiTitle=Schema Service
swagger.apiDescription=Schema Service enables a centralized governance and management of schema in the Data Ecosystem. It offers an implementation of the schema standard. \
<p>Schema Service provides all necessary APIs to Fetch, create, update and mark a schema obsolete.</p>
swagger.apiVersion=1.0
swagger.apiContactName=OSDU Data Platform Team
swagger.apiContactEmail=dps@OSDU.org
swagger.apiLicenseName=Apache 2.0
swagger.apiLicenseUrl=https://www.apache.org/licenses/LICENSE-2.0.html
swagger.apiServerUrl=${server.servlet.context-path:/}
swagger.apiServerFullUrlEnabled=${api.server.fullUrl.enabled:false}

#Schema API related properties
schemaApi.createSchema.summary=Adds a schema to the schema repository.
schemaApi.createSchema.description=Adds a schema to the schema repository. The schemaIdentity must be unique. The `authority`, `source` and `entityType` will be registered if not present. \
<p>If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails.</p> \
<p>**Note:** The schema must not reference other schemas with status `DEVELOPMENT`. Scope to a schema will be set by system based on partition id (`SHARED` for common tenant and `INTERNAL` for private tenant). </p>\
<p>Required roles : `service.schema-service.editors` groups to create schema.</p>
schemaApi.getSchema.summary=Gets schema from the schema repository.
schemaApi.getSchema.description=Retrieve a schema using its system defined id. Required roles:  `service.schema-service.viewers` groups to get the schema.
schemaApi.getSchemaInfoList.summary=Searches SchemaInfo repository
schemaApi.getSchemaInfoList.description=Searches for information of available schema (SchemaInfo) in schema repository. Support options to filter out the search contents. \
<p>Required roles:  `service.schema-service.viewers` groups to get the schema.</p>
schemaApi.upsertSchema.summary=Creates/Updates a schema in development status
schemaApi.upsertSchema.description=Creates a new schema or updates an already existing schema with status `DEVELOPMENT` in the schema repository. If a user tries to create/update a schema with status other than `DEVELOPMENT`, API will throw an exception. \
<p>Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of `PUBLISHED` or `OBSOLETE` schemas). A schema state can also be changed from `DEVELOPMENT` to `PUBLISHED` or `OBSOLETE` while updating schema content or by providing the same schema content.</p> \
<p>**Note:** The schema may refer to other schema definitions in `DEVELOPMENT` state. If those schemas are updated themselves, it is the developer's responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can't be updated, its a system defined value.</p> \
<p>Required roles:  `service.schema-service.editors` groups to update schema.</p>

#System Schema API related properties
systemSchemaApi.upsertSystemSchema.summary=Creates/Updates a schema in development status
systemSchemaApi.upsertSystemSchema.description=Creates a new schema or updates an already existing schema with status `DEVELOPMENT` in the schema repository. If a user tries to create a schema with status other than `DEVELOPMENT`, API will not throw an exception. \
<p>The update of schema without `DEVELOPMENT` status would cause error. Any schema instance with the same schemaIdentity is replaced. A schema state can also be changed from `DEVELOPMENT` to `PUBLISHED` or `OBSOLETE` while updating schema content or by providing the same schema content.</p> \
<p>**Note:** The schema may refer to other schema definitions in `DEVELOPMENT` state. If those schemas are updated themselves, it is the developer's responsibility to PUT the dependent schemas again to update the schema. Scope for a schema will be SHARED for all the schemas created using this API.</p>\
<p>Service principal authorization is required to call thi API.</p>

#Info & Health API related properties
infoApi.info.summary=Version info
infoApi.info.description=For deployment available public `/info` endpoint, which provides build and git related information.
healthCheckApi.livenessCheck.summary=Liveness Check endpoint
healthCheckApi.livenessCheck.description=For deployment available public `/liveness_check` endpoint verifies the operational status of the Schema Service.

