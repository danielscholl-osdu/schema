trigger:
  branches:
    include:
    - master

  paths:
    exclude:
      - README.md
      - .gitignore    

variables:
  osProjectName: schema
  dockerImageName: os-$(osProjectName)-app
  tag: $(Build.BuildNumber)
  dockerDir: provider/$(osProjectName)-gcp/docker
  deploymentName: os-$(osProjectName)-service

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
      demands: Maven
      
    steps:
    - task: DownloadSecureFile@1
      name: gcrKey
      inputs:
        secureFile: gcr-push-key-file.json
        
    - task: DownloadSecureFile@1
      name: kubeconfig
      inputs:
        secureFile: 'kubeconfig'
        
    - task: Maven@3
      displayName: Maven Build
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        options: '--settings maven/settings.xml -DVSTS_FEED_TOKEN=$(VSTS_FEED_TOKEN)'
        goals: 'clean install package'
    
    - task: CopyFiles@2
      inputs:
        Contents: 'provider/$(osProjectName)-gcp/deployments/*'
        TargetFolder: '$(build.artifactstagingdirectory)/deployments'
      condition: succeeded()

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          #!/bin/bash
              pushd $(dockerDir)
              cat $(gcrKey.secureFilePath) | docker login -u _json_key --password-stdin https://gcr.io
              echo $(dockerImageName)
              docker-compose build $(dockerImageName)
              docker tag gcr.io/opendes/$(dockerImageName) gcr.io/opendes/$(dockerImageName):$(tag)
              docker push gcr.io/opendes/$(dockerImageName):$(tag)
              docker push gcr.io/opendes/$(dockerImageName)              echo 'Push done.'
              
              kubectl --kubeconfig $(kubeconfig.secureFilePath) rollout restart deployment/$(deploymentName)
              
              popd
              sleep 10
              OUTPUT="200 OK"
              ENDPOINT=$(SCHEMA_DEV_URL)/health
              echo $ENDPOINT
              
              while [ -z "$STATUS" ]; do
                STATUS=`curl -v --silent --http1.0 "$ENDPOINT" 2>&1 | grep "$OUTPUT"`
                echo $STATUS
                
                if [ -z "$STATUS" ]; then
                  echo "Endpoint is not up yet."
                  sleep 10
                else
                  echo "Endpoint is up"
                fi
              done
      condition: succeeded()
      displayName: 'build,upload and deploy docker image'
    
    - task: Maven@3
      displayName: 'Running IntegrationTest'
      inputs:
        mavenPomFile: 'testing/schema-test-core/pom.xml'
        goals: 'verify'
        options: '--settings maven/settings.xml -DVSTS_FEED_TOKEN=$(VSTS_FEED_TOKEN)'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
      env:
        INTEGRATION_TEST_AUDIENCE: $(INTEGRATION_TEST_AUDIENCE)
        INTEGRATION_TESTER : $(INTEGRATION_TESTER)
        PRIVATE_TENANT1 : $(PRIVATE_TENANT1)
        PRIVATE_TENANT2 : $(PRIVATE_TENANT2)
        SHARED_TENANT : $(SHARED_TENANT)
        HOST : $(HOST)
        VENDOR : $(VENDOR)
        
        
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'
    - task: Bash@3
      displayName: 'Deploying shared schemas'
      inputs:
        targetType: 'inline'
        script: |
          #!/bin/bash

          pip install -r deployments/scripts/google/requirements.txt

          export JSON_KEY=$(INTEGRATION_TESTER)
          export AUDIENCE=$(INTEGRATION_TEST_AUDIENCE)

          BEARER_TOKEN=`python deployments/scripts/google/Token.py`

          export BEARER_TOKEN=$BEARER_TOKEN
          export APP_KEY=""
          export DATA_PARTITION=$(DATA_PARTITION)

          python deployments/scripts/DeploySharedSchemas.py -u $(SCHEMA_DEV_URL)/schema
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      condition: succeededOrFailed()
      
- stage: DeployToQA
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  variables:
    sourceImageName: gcr.io/opendes/$(dockerImageName)
    destinationImageName: us.gcr.io/opendes-evt/$(dockerImageName)

  jobs:
    - job: DeployToQA

      steps:

        - task: DownloadSecureFile@1
          name: gcrKey
          inputs:
            secureFile: cicd-push-image-to-cr-keyfile.json

        - task: DownloadSecureFile@1
          name: gcrKeyEvt
          inputs:
            secureFile: cicd-push-image-to-cr-evt-keyfile.json

        - task: DownloadSecureFile@1
          name: kuberConfigEvt
          inputs:
            secureFile: kubeconfig-evt-opendes-qa-us

        - bash: |
            #!/bin/bash
            set -e

            cat $(gcrKey.secureFilePath) | docker login -u _json_key --password-stdin https://gcr.io
            docker pull $(sourceImageName):$(tag)

            cat $(gcrKeyEvt.secureFilePath) | docker login -u _json_key --password-stdin https://us.gcr.io
            docker tag $(sourceImageName):$(tag) $(destinationImageName):$(tag)
            docker tag $(sourceImageName):$(tag) $(destinationImageName)
            docker push $(destinationImageName):$(tag)
            docker push $(destinationImageName)

            kubectl --kubeconfig $(kuberConfigEvt.secureFilePath) rollout restart deployment/$(deploymentName)